function max(numbers) {
  // we set `currentMax` to the value
  // of first item in `numbers`,
  // then we loop through `numbers`,
  // comparing each item to `currentMax`.
  // if the item is greater than `currentMax`,
  // we set `currentMax` to that number.
  let currentMax = numbers[0];
  for (let i=0; i < numbers.length; i++) {
    if (numbers[i] > currentMax) {
       currentMax = numbers[i];
    }
  }
  return currentMax;
}

function min(numbers) {
  // Set `currentMin` to the value
  // of first item in `numbers`,
  // then we loop through `numbers`,
  // comparing each item to `currentMin`.
  // if the item is less than `currentMin`,
  // we set `currentMin` to that number.
 let currentMin = numbers[0];
 for(let i=0; i< numbers.length; i++) {
   if (numbers[i] < currentMin) {
     currentMin = numbers[i];
   }
 }
 return currentMin;
}



/* From here down, you are not expected to 
   understand.... for now :)  
   
   
   Nothing to see here!
   
*/


// tests

function testFunctionWorks(fn, input, expected) {
  if (fn(input) === expected) {
    console.log('SUCCESS: `' + fn.name + '` works on `[' + input + ']`');
    return true;
  }
  else {
    console.log(
      'FAILURE: `' + fn.name + '([' + input + '])` should be ' + expected +
      ' but was ' + fn(input)
    );
    return false;
  }
}


(function runTests() {
  // we'll use the variables in our test cases
  const numList1 = [-5, 28, 98, -20013, 0.7878, 22, 115];
  const realMin1 = numList1[3];
  const realMax1 = numList1[6];
  const numList2 = [0, 1, 2, 3, 4];
  const realMin2 = numList2[0];
  const realMax2 = numList2[4];
  
  const testResults = [
    testFunctionWorks(max, numList1, realMax1),
    testFunctionWorks(max, numList2, realMax2),
    testFunctionWorks(min, numList1, realMin1),
    testFunctionWorks(min, numList2, realMin2),
  ];
  
  const numPassing = testResults.filter(function(result){ return result; }).length;
  console.log(numPassing + ' out of ' + testResults.length + ' tests passing.');
})();


function average(numbers) {
  return numbers.reduce (function (a,b) {return a + b ;})/ 
  numbers.length
}
/* using reduce js function to set all the values inside the array to a single value, their sum.*/



/* From here down, you are not expected to 
   understand.... for now :)  
   
   
   Nothing to see here!
   
*/


// tests

function testFunctionWorks(fn, input, expected) {
  if (fn(input) === expected) {
    console.log('SUCCESS: `' + fn.name + '` works on `[' + input + ']`');
    return true;
  }
  else {
    console.log(
      'FAILURE: `' + fn.name + '([' + input + '])` should be ' + expected +
      ' but was ' + fn(input)
    );
    return false;
  }
}

(function runTests() {
  const numList1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  const correctAns1 = 5.5;
  const numList2 = [0, -1, 1];
  const correctAns2 = 0;
  
  const testResults = [
    testFunctionWorks(average, numList1, correctAns1),
    testFunctionWorks(average, numList2, correctAns2)
  ];
  const numPassing = testResults.filter(function(result){ return result; }).length;
  console.log(numPassing + ' out of ' + testResults.length + ' tests passing.')
})();


//fizzbuzz with comments

function fizzBuzz(countTo) {
// create an empty array or [] that will
  // contain our results
  const result = [];
  // let 'i' count from 1 to `countTo`, and for
  // each number, add the number or its 
  // substitution (fizz, buzz, fizzbuzz)
  // to the result array.
  for (let i=1; i <= countTo; i++) {
    //what to return if the number is divisible by both 5 & 13
    if (i % 15 === 0) {
      result.push('fizzbuzz'); 
    }
    // returns buzz if the number or count is divisible by 5 
    else if (i % 5 === 0) {
      result.push('buzz');
    }
    //returns fizz if the number or count is divisible by 3
    else if (i % 3 === 0) {
      result.push('fizz');
    }
    else {
      result.push(i);
    }
  }
  return result;
}





/* From here down, you are not expected to 
   understand.... for now :)  
   
   
   Nothing to see here!
   
*/



// tests
(function testFizzBuzz() {
  // we'll use the variables in our test cases
  const countTo = 16;
  const expected = [
    1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz',
    'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16
  ];

  const actual = fizzBuzz(countTo) || [];
  
  if (
    expected.length === actual.length &&
    expected.every(function(item, index) {
      return actual[index] === item;}) ) {
    
      console.log('SUCCESS: fizzBuzz is working');
  }
  else {
    console.log('FAILURE: fizzBuzz is not working');
  }  
})();
